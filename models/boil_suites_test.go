// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Companies", testCompanies)
	t.Run("Departments", testDepartments)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Companies", testCompaniesDelete)
	t.Run("Departments", testDepartmentsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("Departments", testDepartmentsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("Departments", testDepartmentsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Companies", testCompaniesExists)
	t.Run("Departments", testDepartmentsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Companies", testCompaniesFind)
	t.Run("Departments", testDepartmentsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Companies", testCompaniesBind)
	t.Run("Departments", testDepartmentsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Companies", testCompaniesOne)
	t.Run("Departments", testDepartmentsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Companies", testCompaniesAll)
	t.Run("Departments", testDepartmentsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Companies", testCompaniesCount)
	t.Run("Departments", testDepartmentsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Companies", testCompaniesHooks)
	t.Run("Departments", testDepartmentsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("Departments", testDepartmentsInsert)
	t.Run("Departments", testDepartmentsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Companies", testCompaniesReload)
	t.Run("Departments", testDepartmentsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("Departments", testDepartmentsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Companies", testCompaniesSelect)
	t.Run("Departments", testDepartmentsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Companies", testCompaniesUpdate)
	t.Run("Departments", testDepartmentsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("Departments", testDepartmentsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
